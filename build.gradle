apply plugin: 'groovy'
apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'eclipse'
apply plugin:com.smokejumperit.gradle.CukePlugin
apply plugin:de.huxhorn.gradle.pgp.PgpPlugin

version = '0.1.3-SNAPSHOT'

configurations {
    runtime.exclude module: 'groovy'
}

buildscript {
    repositories {
        mavenCentral()
        mavenRepo urls:'http://repo.smokejumperit.com'
    }
    dependencies {
        classpath 'com.smokejumperit:gradle-plugins:0.7.1-SNAPSHOT'
        classpath 'de.huxhorn.gradle:de.huxhorn.gradle.pgp-plugin:0.0.3'
    }
}

repositories {
    mavenCentral()
    mavenRepo urls: "https://oss.sonatype.org/content/repositories/snapshots"
}

dependencies {
    compile 'org.json:json:20090211'
    compile 'org.apache.httpcomponents:httpclient:4.0-beta2'
    compile 'commons-lang:commons-lang:2.5'
    groovy 'org.codehaus.groovy:groovy-all:1.7.6'
    testCompile 'org.codehaus.groovy:groovy-all:1.7.6'
    testCompile 'junit:junit:4.8.2'
    testCompile 'org.hamcrest:hamcrest-all:1.1'
    testRuntime 'org.picocontainer:picocontainer:2.13.2'
}

jar {
    manifest {
        attributes 'Specification-Title': 'Embedly Java Client',
                   'Specification-Version': version,
                   'Specification-Vendor': 'Embedly, Inc.',
                   'Implementation-Title': 'com.embedly.api',
                   'Implementation-Version': version,
                   'Implementation-Vendor': 'Embedly, Inc.'
   }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

task runSimple(dependsOn: [classes, testClasses], type: JavaExec) {
    main = 'com.embedly.examples.Simple'
    classpath = sourceSets.main.runtimeClasspath + sourceSets.test.runtimeClasspath 
}
    

artifacts {
    archives javadocJar
    archives sourcesJar
}

if (project.hasProperty("pgpKeyId")) {
    pgp {
        secretKeyRingFile = new File("${System.properties['user.home']}/.gnupg/secring.gpg")
        keyId = pgpKeyId
        password = pgpPassword
    }
}

uploadArchives.dependsOn sourcesJar, javadocJar
uploadArchives {
    if (project.hasProperty('repoUserName') && project.hasProperty('repoPassword')) {
        repositories.mavenDeployer {
            configureAuth = {
                authentication(userName: repoUserName, password: repoPassword)
            }

            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/", configureAuth)
            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/", configureAuth)

            pom.project {
                parent {
                    groupId 'org.sonatype.oss'
                    artifactId 'oss-parent'
                    version '7'
                }
                name 'Embedly API'
                description 'Embedly client library for API and Pro'
                url 'https://github.com/embedly/embedly-java'
                inceptionYear "2011"
                licenses {
                    license {
                        name 'The Apache Software License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        distribution 'repo'
                    }
                }
                groupId 'com.embedly'
                scm {
                    url 'https://github.com/embedly/embedly-java'
                    connection 'scm:git:https://github.com/embedly/embedly-java.git'
                    developerConnection 'scm:git:https://github.com/embedly/embedly-java.git'
                }
                developers {
                    developer {
                        id "doki_pen"
                        name "Bob Corsaro"
                        email "rcorsaro@gmail.com"
                        url "http://www.google.com/profiles/rcorsaro"
                        roles {
                            role "Lead"
                            role "Founder"
                        }
                        timezone 'America/New_York'
                    }
                }
            }
        }
    }
}


task copySteps(type: Copy) {
    from 'src/test/features/steps'
    into 'build/classes/test'
}

runFeatures.dependsOn copySteps
build.dependsOn runFeatures
